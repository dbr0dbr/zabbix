- name: Generate RSA host key
  shell: ssh-keygen -q -t rsa  -C "" -N "" -f /root/.ssh/id_rsa
  args:
    creates: /root/.ssh/id_rsa
    chdir: /root/.ssh
  when: ansible_host == hostvars[groups[server_group][0]]['ansible_host'] and (groups[server_group] | length != 1)

- name: Store file into /root/.ssh/id_rsa
  fetch:
    src: /root/.ssh/id_rsa
    dest: /tmp/id_rsa
    flat: yes
  when: ansible_host == hostvars[groups[server_group][0]]['ansible_host'] and (groups[server_group] | length != 1)

- name: copy key to all hosts
  copy: 
    src: /tmp/id_rsa
    dest: /root/.ssh/id_rsa
    mode: '0600'
  when: (groups[server_group] | length != 1)

- name: Store file into /root/.ssh/id_rsa.pub
  fetch:
    src: /root/.ssh/id_rsa.pub
    dest: /tmp/id_rsa.pub
    flat: yes
  when: ansible_host == hostvars[groups[server_group][0]]['ansible_host'] and (groups[server_group] | length != 1)
  
- name: Set authorized key taken from file
  authorized_key:
    user: root
    state: present
    key: "{{ lookup('file', '/tmp/id_rsa.pub') }}"

- name: ensures backup dirs exists
  file:
    path: '{{ item }}'
    state: directory
  with_items:
    - "{{ pg_backup_dir }}"
    - "{{ pg_archive_logs_dir }}"
    - "{{ pg_full_backup_dir }}"
    - "{{ scripts_dir }}"

#- name: backup_db
#  shell: pg_basebackup --checkpoint=fast -v -R -D '{{ backup_path }}/last/'
#  become: true
#  become_user: postgres
#  tags:
#    - backup
#    - never

- name: Install EPEL Repo
  dnf:
    name: https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm 

- name: Install lsyncd
  yum:
     name: "lsyncd"
  environment: "{{ proxy_env }}"
  when: (groups[server_group] | length != 1)

- name: Template configuration file for /etc/lsyncd.conf
  template:
    src:  lsyncd.conf.j2
    dest: '/etc/lsyncd.conf'
  notify:
    - restart lsyncd
  when: (groups[server_group] | length != 1)

- name: Template configuration file for pgsql_backup.sh
  template:
    src:  pgsql_backup.sh.j2
    dest: '{{ scripts_dir }}/pgsql_backup.sh'
    mode: '0755'

- name: Creates a cron file for full db backup in /etc/cron.d
  cron:
    name: pgsql_backup
    minute: "{{ pgsql_backup_min }}"
    hour: "{{ pgsql_backup_hour }}"
    user: root
    job: "{{ scripts_dir }}/pgsql_backup.sh"
    cron_file: pgsql_backup

- name: Template configuration file for clean_wal_archive.sh
  template:
    src:  clean_wal_archive.sh.j2
    dest: '{{ scripts_dir }}/clean_wal_archive.sh'
    mode: '0755'

- name: Creates a cron file for clean wal archive in /etc/cron.d
  cron:
    name: clean_wal_archive
    minute: "*/30"
    hour: "*"
    user: root
    job: "{{ scripts_dir }}/clean_wal_archive.sh"
    cron_file: clean_wal_archive
